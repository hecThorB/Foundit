@using Foundit.Web.Enums
@using Foundit.Web.Models.ViewModels;
@model WelcomeBaseViewModel
@{
    ViewBag.Title = "Create";
    Layout = "../Shared/_LayoutConsumer.cshtml";
}

@section styles {
    <style type="text/css">
    </style>
}

<!-- PAGE TITLE -->
<section class="module-sm bg-white-dark">
    <div class="container">

        <div class="row">
            <div class="col-sm-12 text-center">

                <h3 class="montserrat text-uppercase m-b-10">Page Title</h3>
                <ol class="breadcrumb text-xs">
                    <li><a href="#">Home</a></li>
                    <li><a href="#">Breadcrumbs</a></li>
                    <li class="active">Page Title</li>
                </ol>

            </div>
        </div>

    </div>
</section>
<!-- END PAGE TITLE -->
<!-- PAGE -->
<section class="module">
    <div class="container">

        <div class="row">

            <!-- FORMS -->
            <section class="module bg-black-alfa-70 color-white parallax" data-background="assets/images/module-3.jpg">
                <div class="container">

                    <div class="row m-b-70">
                        <div class="col-sm-8 col-sm-offset-2">
                            <h5 class="montserrat text-uppercase bottom-line">Profile Account Information</h5>
                            <form id="profileForm" class="form-horizontal">

                                <div class="form-group">
                                    <label for="firstName" class="col-sm-2 control-label">Name</label>
                                    <div class="col-sm-10">
                                        <input type="text" name="firstName" class="form-control form-transparent" id="inputFirstName" placeholder="First Name">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="lastName" class="col-sm-2 control-label"></label>
                                    <div class="col-sm-10">
                                        <input type="text" name="lastName" class="form-control form-transparent" id="inputLastName" placeholder="Last Name">
                                    </div>
                                </div>
                                <div class="form-group genderRadio">
                                    <label for="inputGender" class="col-sm-2 control-label">Gender</label>
                                    <div class="col-sm-8 gender">
                                        <div name="genderRadio" id="genderRadio">
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="inputEmail" class="col-sm-2 control-label">Email</label>
                                    <div class="col-sm-10">
                                        <input type="email" name="email" class="form-control form-transparent" id="inputEmail" placeholder="Email">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="inputPhoneNumber" class="col-sm-2 control-label">Phone Number</label>
                                    <div class="col-sm-10">
                                        <input type="tel" name="phoneNumber" class="form-control form-transparent" id="inputPhoneNumber" placeholder="(xxx)xxx-xxxx">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="inputBirthday" class="col-sm-2 control-label">Date of Birth</label>
                                    <div class="col-sm-10">
                                        <input type="date" name="birthday" class="form-control form-transparent" id="inputBirthday" placeholder="Month/Day/Year">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-offset-2 col-sm-10">
                                        <button type="button" class="btn btn-base" id="signInButton"><span id="signUpBtn">Create Profile</span></button>
                                        <button type="button" class="btn btn-base" id="resetForm"><span id="resetBtn">Reset Form</span></button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div><!-- .row -->

                </div>
            </section>
            <!-- END FORMS -->


        </div><!-- .row -->

    </div>
</section>

<!-- END PAGE -->

@section scripts {
    <script src="~/Scripts/foundit/services/foundit.services.profileAccountInfo.js"></script>
    <script type="text/javascript">
        foundIt.page.genderKinds = @typeof(GenderKind).EnumToJson(1);
        foundIt.page.accountId = null;
        // ---------------------- Page Scripts --------------------------

        @if (Model != null) {
            if (@Model.IsWelcomeMode)
            {
                <text>
                    foundIt.page.welcomeMode = true;
                </text>
            }
            else
            {
                <text>
                    foundIt.page.accountId = @Model.EditId;
                </text>
            }
        }
        foundIt.page.accountInfoData = null;

        foundIt.page.startUp = function () {
            $("#signInButton").on("click", foundIt.page.submitProfileAccountInfo);

            $("#resetForm").on("click", foundIt.page.resetForm);

            foundIt.page.initializeValidation();

            foundIt.page.initializeGenders();

            if(foundIt.page.accountId !== null){
                foundIt.services.profileAccountInfo.getById(foundIt.page.accountId,foundIt.page.handlers.getAjaxSuccess,foundIt.page.handlers.getAjaxError);
                foundIt.page.changeButtonsForEditPage();
            }
        };

        foundIt.page.handlers.postAjaxSuccess = function (responseData) {
            if (foundIt.page.welcomeMode) {
                window.location = "basics";
            } else {
                foundIt.page.accountId = responseData.item;
                alert("Your Profile Information has submitted!");
                console.log("Post Success!!");
            }
        };

        foundIt.page.handlers.postAjaxError = function (responseData) {
            console.log(responseData);
        };

        foundIt.page.handlers.putAjaxSuccess = function (responseData) {
            alert("Thank you for updating your Profile Information!");
            console.log("Put Success!!");
        };

        foundIt.page.handlers.getAjaxError = function (responseData) {
            console.log(responseData);
        };

        foundIt.page.handlers.getAjaxSuccess = function (responseData) {
            foundIt.page.accountInfoData = responseData.item;
            foundIt.page.populateForm(sabio.page.accountInfoData)
            console.log("Get Succes");
            console.log(responseData.item);
        };

        foundIt.page.handlers.getAjaxError = function (responseData) {
            console.log(responseData);
        };

        foundIt.page.initializeGenders = function (){
            $gender = $("#genderRadio");
            for(var key in foundIt.page.genderKinds){
                var $radioButton = $("<input class='radio-gender' type='radio' name='gender'/><span>Text</span><br />")
                var currentGender = foundIt.page.genderKinds[key];
                $radioButton.attr("value", currentGender.value);
                $radioButton.text(currentGender.displayName);
                $gender.append($radioButton);
            }
        };

        foundIt.page.initializeValidation = function () {
            $("#profileForm").validate(
                    {
                        rules:
                        {
                            "firstName":
                    {
                        required: true
                    },
                            "lastName":
                            {
                                required: true
                            },
                            "gender":
                            {
                                required: true,
                            },
                            "email":
                            {
                                required: true
                            },
                            "phoneNumber":
                            {
                                required: true
                            },
                            "birthday":
                            {
                                required: true
                            },
                        },
                        messages:
                                {
                                    "firstName":
                            {
                                required: "Please enter your first name."
                            },
                                    "lastName":
                                    {
                                        required: "Please enter your last name."
                                    },
                                    "email":
                                    {
                                        required: "Please enter your email."
                                    },
                                    "phoneNumber":
                                    {
                                        required: "Please enter your phone number."
                                    },
                                    "birthday":
                                    {
                                        required: "Please enter your birthday."
                                    },
                                }
                    });
        };

        foundIt.page.submitProfileAccountInfo = function (e) {
            e.preventDefault();
            if (foundIt.page.accountId == null) {
                if ($("#profileForm").valid()) {
                    var formInfo = {};
                    formInfo.firstName = $("#inputFirstName").val();
                    formInfo.lastName = $("#inputLastName").val();
                    formInfo.gender = $(".radio-gender:checked").val();
                    formInfo.email = $("#inputEmail").val();
                    formInfo.phoneNumber = $("#inputPhoneNumber").val();
                    formInfo.dateofBirth = $("#inputBirthday").val();
                    console.log(formInfo);
                    console.log("validate function passed.");
                    foundIt.services.profileAccountInfo.insert(formInfo, sabio.page.handlers.postAjaxSuccess, sabio.page.handlers.postAjaxError);
                } else {
                    console.log("did not pass validate function.");
                }
            } else {
                var formInfo = {};
                formInfo.Id = foundIt.page.accountId;
                formInfo.firstName = $("#inputFirstName").val();
                formInfo.lastName = $("#inputLastName").val();
                formInfo.gender = $(".radio-gender:checked").val();
                formInfo.email = $("#inputEmail").val();
                formInfo.phoneNumber = $("#inputPhoneNumber").val();
                formInfo.dateofBirth = $("#inputBirthday").val();
                console.log(formInfo);
                foundIt.services.profileAccountInfo.update(sabio.page.accountId, formInfo, sabio.page.handlers.putAjaxSuccess, sabio.page.handlers.putAjaxError);
            }
        };

        foundIt.page.populateForm = function(obj){

            $("#profileForm").find("#inputFirstName").val(obj.firstName);
            $("#profileForm").find("#inputLastName").val(obj.lastName);
            $("#profileForm").find("#genderRadio").val(obj.gender);
            $("#profileForm").find("#inputEmail").val(obj.email);
            $("#profileForm").find("#inputPhoneNumber").val(obj.phoneNumber);
            var dateOfBirth = obj.dateOfBirth;
            var birthday = "";
            for (var i = 0; i < dateOfBirth.length -9; i++) {
                birthday += dateOfBirth[i];
            }
            $("#profileForm").find("#inputBirthday").val(birthday);
            if(obj.gender == 1){
                $("input[name=gender][value='1']").prop('checked', true);
            }else if(obj.gender == 2){
                $("input[name=gender][value='2']").prop('checked', true);
            }


        };

        foundIt.page.changeButtonsForEditPage = function(){
            $("#signUpBtn").text("SUBMIT EDIT");
            $("#resetBtn").text("UNDO CHANGE");
        };

        foundIt.page.resetForm = function () {
            if(foundIt.page.accountInfoData !== null){
                foundIt.page.populateForm(sabio.page.accountInfoData);
            } else{
                foundIt.page.accountId = null;
                $("#profileForm").get(0).reset();
                alert("The Form has been reset. Information submitted now will create a new profile.");
            }
        };

    </script>
}
